package net.pentarchy.luxuria.block;

import net.pentarchy.luxuria.item.ItemRubyGem;
import net.pentarchy.luxuria.ElementsLuxuria;

import net.minecraftforge.fml.relauncher.SideOnly;
import net.minecraftforge.fml.relauncher.Side;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.client.model.ModelLoader;
import net.minecraftforge.client.event.ModelRegistryEvent;

import net.minecraft.world.gen.feature.WorldGenMinable;
import net.minecraft.world.gen.IChunkGenerator;
import net.minecraft.world.chunk.IChunkProvider;
import net.minecraft.world.World;
import net.minecraft.world.IBlockAccess;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.NonNullList;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.Item;
import net.minecraft.init.Blocks;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.block.state.IBlockState;
import net.minecraft.block.material.Material;
import net.minecraft.block.SoundType;
import net.minecraft.block.Block;

import java.util.Random;

@ElementsLuxuria.ModElement.Tag
public class BlockRubyOre extends ElementsLuxuria.ModElement {
    @GameRegistry.ObjectHolder("luxuria:ruby_ore")
    public static final Block block = null;

    public BlockRubyOre(ElementsLuxuria instance) {
        super(instance, 1);
    }

    @Override
    public void initElements() {
        elements.blocks.add(() -> new BlockCustom().setRegistryName("ruby_ore"));
        elements.items.add(() -> new ItemBlock(block).setRegistryName(block.getRegistryName()));
    }

    @SideOnly(Side.CLIENT)
    @Override
    public void registerModels(ModelRegistryEvent event) {
        ModelLoader.setCustomModelResourceLocation(Item.getItemFromBlock(block), 0, new ModelResourceLocation("luxuria:ruby_ore", "inventory"));
    }

    @Override
    public void generateWorld(Random random, int chunkX, int chunkZ, World world, int dimID, IChunkGenerator cg, IChunkProvider cp) {
        if (dimID != 0) return; // Only generate in the Overworld

        for (int i = 0; i < 6; i++) {
            int x = chunkX + random.nextInt(16);
            int y = random.nextInt(31) + 1;
            int z = chunkZ + random.nextInt(16);
            new WorldGenMinable(block.getDefaultState(), 2, blockAt -> blockAt.getBlock() == Blocks.STONE).generate(world, random, new BlockPos(x, y, z));
        }
    }

    public static class BlockCustom extends Block {
        public BlockCustom() {
            super(Material.ROCK);
            setUnlocalizedName("ruby_ore");
            setSoundType(SoundType.STONE);
            setHarvestLevel("pickaxe", 2);
            setHardness(3F);
            setResistance(5F);
            setLightLevel(0F);
            setLightOpacity(255);
            setCreativeTab(CreativeTabs.BUILDING_BLOCKS);
        }

        @Override
        public void getDrops(NonNullList<ItemStack> drops, IBlockAccess world, BlockPos pos, IBlockState state, int fortune) {
            Random random = world instanceof World ? ((World) world).rand : new Random();
            int quantity = quantityDropped(state, fortune, random);
            drops.add(new ItemStack(ItemRubyGem.block, quantity));
        }

        @Override
        public int quantityDropped(IBlockState state, int fortune, Random random) {
            // Base drop is always 1 ruby gem
            int baseDrop = 1;

            // Additional drops due to fortune
            if (fortune > 0) {
                int additionalDrop = random.nextInt(fortune + 1);
                return baseDrop + additionalDrop;
            } else {
                return baseDrop;
            }
        }

        @Override
        public Item getItemDropped(IBlockState state, Random random, int fortune) {
            return ItemRubyGem.block;
        }

        @Override
        public int getExpDrop(IBlockState state, IBlockAccess world, BlockPos pos, int fortune) {
            Random rand = world instanceof World ? ((World) world).rand : RANDOM;
            if (this.getItemDropped(state, rand, fortune) != Item.getItemFromBlock(this)) {
                return MathHelper.getInt(rand, 1, 4);
            }
            return 0;
        }
    }
}
